} else {
tops <-   rbind(tops, poly2)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
faces$fill <- as.character(faces$fill)
faces$border <- as.character(faces$border)
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
plot(st_geometry(faces), col=faces$fill, border = faces$border, lwd=0.4, add=TRUE)
plot(st_geometry(poly2), col=fill[1], border = border[1], add= TRUE)
return(c(faces,tops))
}
plot(st_geometry(x))
test <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
View(test[1])
View(test[[1]])
extrude <- function(x, var, k = 0.5, col = "red", add = FALSE) {
# multi polygons -> polygons
x <- st_cast(x, "POLYGON")
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
# sort polygons
x$order <- st_coordinates(st_centroid(st_geometry(x)))[,2]
x <- x[order(x$order, decreasing = TRUE),]
plot(st_geometry(x), col="#CCCCCC", border="white",add = add)
for (i in 1:nrow(x)){
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
pts <- st_coordinates(poly)
pts2 <- st_coordinates(poly2)
nb <- dim(pts)[1] - 1
idx <- unique(pts[, colnames(pts) %in% c("L1", "L2", "L3")])
nb <- dim(pts)[1] - 1
for(z in 1:nb){
dot1 <- c(pts[z,"X"], pts[z,"Y"])
dot1["X"]
dot2 <- c(pts[z+1,"X"], pts[z+1,"Y"])
dot3 <- c(pts2[z+1,"X"], pts2[z+1,"Y"])
dot4 <- c(pts2[z,"X"], pts2[z,"Y"])
pos <- as.numeric((dot1["Y"] +  dot2["Y"]) / 2)
ang <- atan((dot2["Y"] - dot1["Y"]) / ( dot2["X"] - dot1["X"]))*180/pi
if (z == 1 & i == 1){
faces <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
} else {
face <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
faces <- rbind(faces, face)
}
}
if(i == 1){
tops <- poly2
} else {
tops <-   rbind(tops, poly2)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
faces$fill <- as.character(faces$fill)
faces$border <- as.character(faces$border)
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
plot(st_geometry(faces), col=faces$fill, border = faces$border, lwd=0.4, add=TRUE)
plot(st_geometry(poly2), col=fill[1], border = border[1], add= TRUE)
return(list(c(faces,tops)))
}
plot(st_geometry(x))
test <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
# EXTRUDE
extrude <- function(x, var, k = 0.5, col = "red", add = FALSE) {
# multi polygons -> polygons
x <- st_cast(x, "POLYGON")
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
# sort polygons
x$order <- st_coordinates(st_centroid(st_geometry(x)))[,2]
x <- x[order(x$order, decreasing = TRUE),]
plot(st_geometry(x), col="#CCCCCC", border="white",add = add)
for (i in 1:nrow(x)){
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
pts <- st_coordinates(poly)
pts2 <- st_coordinates(poly2)
nb <- dim(pts)[1] - 1
idx <- unique(pts[, colnames(pts) %in% c("L1", "L2", "L3")])
nb <- dim(pts)[1] - 1
for(z in 1:nb){
dot1 <- c(pts[z,"X"], pts[z,"Y"])
dot1["X"]
dot2 <- c(pts[z+1,"X"], pts[z+1,"Y"])
dot3 <- c(pts2[z+1,"X"], pts2[z+1,"Y"])
dot4 <- c(pts2[z,"X"], pts2[z,"Y"])
pos <- as.numeric((dot1["Y"] +  dot2["Y"]) / 2)
ang <- atan((dot2["Y"] - dot1["Y"]) / ( dot2["X"] - dot1["X"]))*180/pi
if (z == 1 & i == 1){
faces <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
} else {
face <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
faces <- rbind(faces, face)
}
}
if(i == 1){
tops <- poly2
} else {
tops <-   rbind(tops, poly2)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
faces$fill <- as.character(faces$fill)
faces$border <- as.character(faces$border)
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
plot(st_geometry(faces), col=faces$fill, border = faces$border, lwd=0.4, add=TRUE)
plot(st_geometry(poly2), col=fill[1], border = border[1], add= TRUE)
return(list(faces,tops))
}
extrude <- function(x, var, k = 0.5, col = "red", add = FALSE) {
# multi polygons -> polygons
x <- st_cast(x, "POLYGON")
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
# sort polygons
x$order <- st_coordinates(st_centroid(st_geometry(x)))[,2]
x <- x[order(x$order, decreasing = TRUE),]
plot(st_geometry(x), col="#CCCCCC", border="white",add = add)
for (i in 1:nrow(x)){
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
pts <- st_coordinates(poly)
pts2 <- st_coordinates(poly2)
nb <- dim(pts)[1] - 1
idx <- unique(pts[, colnames(pts) %in% c("L1", "L2", "L3")])
nb <- dim(pts)[1] - 1
for(z in 1:nb){
dot1 <- c(pts[z,"X"], pts[z,"Y"])
dot1["X"]
dot2 <- c(pts[z+1,"X"], pts[z+1,"Y"])
dot3 <- c(pts2[z+1,"X"], pts2[z+1,"Y"])
dot4 <- c(pts2[z,"X"], pts2[z,"Y"])
pos <- as.numeric((dot1["Y"] +  dot2["Y"]) / 2)
ang <- atan((dot2["Y"] - dot1["Y"]) / ( dot2["X"] - dot1["X"]))*180/pi
if (z == 1 & i == 1){
faces <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
} else {
face <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
faces <- rbind(faces, face)
}
}
if(i == 1){
tops <- poly2
} else {
tops <-   rbind(tops, poly2)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
faces$fill <- as.character(faces$fill)
faces$border <- as.character(faces$border)
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
#plot(st_geometry(faces), col=faces$fill, border = faces$border, lwd=0.4, add=TRUE)
# plot(st_geometry(poly2), col=fill[1], border = border[1], add= TRUE)
return(list(faces,tops))
}
test <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
View(test[1])
View(test[[1]])
View(test[[2]])
View(test[[1]])
View(test[[2]])
plot(test[[2]])
plot(test[[2]])
plot(unlist(test[[2]]))
tops <- st_sf(poly2)
# multi polygons -> polygons
x <- st_cast(x, "POLYGON")
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
# sort polygons
x$order <- st_coordinates(st_centroid(st_geometry(x)))[,2]
x <- x[order(x$order, decreasing = TRUE),]
plot(st_geometry(x), col="#CCCCCC", border="white",add = add)
i =1
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
height <-  data.frame(x[i,var])[1]
height <-  data.frame(x[i,"pop2019"])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
poly2 <- poly + c(0, as.numeric(x[i,"pop2019"])[1] * k)
poly2 <- poly + c(0, as.numeric(x[i,"pop2019"])[1] * 0.5)
pts <- st_coordinates(poly)
pts2 <- st_coordinates(poly2)
poly2
plot(poly2)
tops <- st_sf(poly2)
x[i]
tops <- st_sf(poly2, x[i])
tops <- st_sf(x[i], geometry = poly2)
poly2
x[i]
x[i,]
tops <- st_sf(x[i,], geometry = poly2)
tops <- st_sf(x[i,1], geometry = poly2)
x[i,1],
x[i,1]
tbl <- (x[i,1]
tops <- st_sf(x[i,1], geometry = poly2)
pts <- st_coordinates(poly)
pts2 <- st_coordinates(poly2)
nb <- dim(pts)[1] - 1
idx <- unique(pts[, colnames(pts) %in% c("L1", "L2", "L3")])
nb <- dim(pts)[1] - 1
for(z in 1:nb){
dot1 <- c(pts[z,"X"], pts[z,"Y"])
dot1["X"]
dot2 <- c(pts[z+1,"X"], pts[z+1,"Y"])
dot3 <- c(pts2[z+1,"X"], pts2[z+1,"Y"])
dot4 <- c(pts2[z,"X"], pts2[z,"Y"])
pos <- as.numeric((dot1["Y"] +  dot2["Y"]) / 2)
ang <- atan((dot2["Y"] - dot1["Y"]) / ( dot2["X"] - dot1["X"]))*180/pi
if (z == 1 & i == 1){
faces <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
tops <- st_sf(poly2)
} else {
face <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
faces <- rbind(faces, face)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
faces$fill <- as.character(faces$fill)
faces$border <- as.character(faces$border)
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
#plot(st_geometry(faces), col=faces$fill, border = faces$border, lwd=0.4, add=TRUE)
# plot(st_geometry(poly2), col=fill[1], border = border[1], add= TRUE)
return(list(faces,tops))
}
plot(st_geometry(x))
test <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
View(test[[1]])
plot(unlist(test[[2]]))
plot(test)
View(test)
plot(deform(getframe(states)))
tmp <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
plot(st_geometry(tmp))
# TEST
# ------------------------
polys <- x[x$id %in% c("CA","AZ"),]
View(x)
plot(st_geometry(polys))
extrude(polys, "pop2019", k = 0.01, col ="#f0a800",add=T)
# TEST SUR LA POP ##############################################################
world <- readRDS("worldpopgrid.rds")
frame <- getframe(world)
plot(st_geometry(frame))
plot(st_geometry(world), add=T)
f <- deform(frame)
x <- deform(world)
plot(st_geometry(f))
plot(st_geometry(x),add=T)
x <- x[!is.na(x$pop2020),]
plot(st_geometry(f))
extrude(x, "pop2020", k = 0.02, col ="#656cd6",add=T)
# TESTS DE TRI
x <- deform(states)
plot(st_geometry(x))
c <- st_centroid(x)
plot(st_geometry(c), pcg=21, cex =1, add=T)
tbl <- x[i,]
tbl
x[i,]
st_geometry(tbl) <- NULL
tbl
tops <- st_sf(tbl, geometry = poly2)
tbl
tops <- st_sf(tbl, geometry = poly2)
tops <- st_sf(tbl, geometry = st_sfc(poly2))
View(tops)
plot(tops)
plot(st_geometry(tops))
i =1
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
tbl <- x[i,]
tops <- st_sf(tbl, geometry = st_sfc(poly2))
i =1
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
tops <- st_sf(x[i,], geometry = st_sfc(poly2))
poly <- st_geometry(x)[[i]]
ployt(poly)
plot(poly)
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
extrude <- function(x, var, k = 0.5, col = "red", add = FALSE) {
# multi polygons -> polygons
x <- st_cast(x, "POLYGON")
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
# sort polygons
x$order <- st_coordinates(st_centroid(st_geometry(x)))[,2]
x <- x[order(x$order, decreasing = TRUE),]
plot(st_geometry(x), col="#CCCCCC", border="white",add = add)
for (i in 1:nrow(x)){
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
top <- st_sf(x[i,], geometry = st_sfc(poly2))
pts <- st_coordinates(poly)
pts2 <- st_coordinates(poly2)
nb <- dim(pts)[1] - 1
idx <- unique(pts[, colnames(pts) %in% c("L1", "L2", "L3")])
nb <- dim(pts)[1] - 1
for(z in 1:nb){
dot1 <- c(pts[z,"X"], pts[z,"Y"])
dot1["X"]
dot2 <- c(pts[z+1,"X"], pts[z+1,"Y"])
dot3 <- c(pts2[z+1,"X"], pts2[z+1,"Y"])
dot4 <- c(pts2[z,"X"], pts2[z,"Y"])
pos <- as.numeric((dot1["Y"] +  dot2["Y"]) / 2)
ang <- atan((dot2["Y"] - dot1["Y"]) / ( dot2["X"] - dot1["X"]))*180/pi
if (z == 1 & i == 1){
faces <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
tops <- top
} else {
face <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
faces <- rbind(faces, face)
tops <- rbind(tops,top)
}
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
faces$fill <- as.character(faces$fill)
faces$border <- as.character(faces$border)
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
#plot(st_geometry(faces), col=faces$fill, border = faces$border, lwd=0.4, add=TRUE)
# plot(st_geometry(poly2), col=fill[1], border = border[1], add= TRUE)
return(list(faces,tops))
}
test <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
faces <- test[[1]]
tops <- test[[2]]
plot(st_geometry(faces))
plot(st_geometry(tops))
View(tops)
extrude <- function(x, var, k = 0.5, col = "red", add = FALSE) {
# multi polygons -> polygons
x <- st_cast(x, "POLYGON")
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
# sort polygons
x$order <- st_coordinates(st_centroid(st_geometry(x)))[,2]
x <- x[order(x$order, decreasing = TRUE),]
# plot(st_geometry(x), col="#CCCCCC", border="white",add = add)
for (i in 1:nrow(x)){
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
top <- st_sf(x[i,], geometry = st_sfc(poly2))
pts <- st_coordinates(poly)
pts2 <- st_coordinates(poly2)
nb <- dim(pts)[1] - 1
idx <- unique(pts[, colnames(pts) %in% c("L1", "L2", "L3")])
nb <- dim(pts)[1] - 1
for(z in 1:nb){
dot1 <- c(pts[z,"X"], pts[z,"Y"])
dot1["X"]
dot2 <- c(pts[z+1,"X"], pts[z+1,"Y"])
dot3 <- c(pts2[z+1,"X"], pts2[z+1,"Y"])
dot4 <- c(pts2[z,"X"], pts2[z,"Y"])
pos <- as.numeric((dot1["Y"] +  dot2["Y"]) / 2)
ang <- atan((dot2["Y"] - dot1["Y"]) / ( dot2["X"] - dot1["X"]))*180/pi
if (z == 1 & i == 1){
tops <- top
} else {
face <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
}
}
if (i == 1){
faces <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
} else {
faces <- rbind(faces, face)
tops <- rbind(tops,top)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
faces$fill <- as.character(faces$fill)
faces$border <- as.character(faces$border)
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
#plot(st_geometry(faces), col=faces$fill, border = faces$border, lwd=0.4, add=TRUE)
# plot(st_geometry(poly2), col=fill[1], border = border[1], add= TRUE)
return(list(faces,tops))
}
plot(st_geometry(x))
test <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
faces <- test[[1]]
tops <- test[[2]]
test <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
View-faces
View(faces)
View(tops)
plot(st_geometry(faces))
extrude <- function(x, var, k = 0.5, col = "red", add = FALSE) {
# multi polygons -> polygons
x <- st_cast(x, "POLYGON")
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
# sort polygons
x$order <- st_coordinates(st_centroid(st_geometry(x)))[,2]
x <- x[order(x$order, decreasing = TRUE),]
# plot(st_geometry(x), col="#CCCCCC", border="white",add = add)
for (i in 1:nrow(x)){
height <-  data.frame(x[i,var])[1]
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
top <- st_sf(x[i,], geometry = st_sfc(poly2))
pts <- st_coordinates(poly)
pts2 <- st_coordinates(poly2)
nb <- dim(pts)[1] - 1
idx <- unique(pts[, colnames(pts) %in% c("L1", "L2", "L3")])
nb <- dim(pts)[1] - 1
for(z in 1:nb){
dot1 <- c(pts[z,"X"], pts[z,"Y"])
dot1["X"]
dot2 <- c(pts[z+1,"X"], pts[z+1,"Y"])
dot3 <- c(pts2[z+1,"X"], pts2[z+1,"Y"])
dot4 <- c(pts2[z,"X"], pts2[z,"Y"])
pos <- as.numeric((dot1["Y"] +  dot2["Y"]) / 2)
ang <- atan((dot2["Y"] - dot1["Y"]) / ( dot2["X"] - dot1["X"]))*180/pi
if (z == 1 & i == 1){
faces <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
} else {
face <- st_sf(pos = pos, ang = ang, fill = fill[2], border = border[2], height = height, geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1)))))
faces <- rbind(faces, face)
}
}
if (i == 1){
tops <- top
} else {
tops <- rbind(tops,top)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
faces$fill <- as.character(faces$fill)
faces$border <- as.character(faces$border)
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
#plot(st_geometry(faces), col=faces$fill, border = faces$border, lwd=0.4, add=TRUE)
# plot(st_geometry(poly2), col=fill[1], border = border[1], add= TRUE)
return(list(faces,tops))
}
test <- extrude(x, "pop2019", k = 0.01, col ="#f0a800",add=T)
faces <- test[[1]]
tops <- test[[2]]
plot(st_geometry(faces))
plot(st_geometry(tops))
View(faces)
View(tops)
