k = 0.01
col = "red"
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")}
nodes <- st_cast(x,"POINT", warn = FALSE)
# Faces
nodes$first <- !duplicated(nodes$id)
nodes$last <- !duplicated(nodes$id, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- dots2x
p3y <- dots2y + dots2$height
p4x <- dots1x
p4y <- dots1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
faces$p1x <- p1x
faces$p2y <- p2y
faces$fd <- paste(faces$p1x,faces$p2y)
faces <- faces[order(faces$pos, decreasing = TRUE),]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
tops <- tops[order(tops$height, decreasing = FALSE),]
# Opérations géométriques
plot(st_geometry(faces), col="red")
plot(st_geometry(tops), col="blue", add=T)
# 1
for(i in ids){
if(i == ids[1]){
f <- st_difference(faces[faces$id == i,],st_buffer(tops[tops$id==i,],1))
} else {
tmp <-  st_difference(faces[faces$id == i,],st_buffer(tops[tops$id==i,],1))
f <- rbind(f,tmp)
}
}
faces <- f
# 2
ids <- tops$id
blocs <- x
for (i in ids){
st_geometry(blocs[i,]) <- st_buffer(st_union(st_union(st_geometry(faces[faces$id==i,]),st_geometry(tops[tops$id==i,]))),1)
}
# 3
for(i in ids){
v <- as.numeric(tops[tops$id == i,var] %>% st_drop_geometry())
tmp <- tops %>% st_drop_geometry()
ids2 <- tmp[tmp[,var] > v & tmp$id != i,"id"]
geom1 <- st_geometry(tops[tops$id == i,])
# plot(geom1)
geom2 <- st_geometry(blocs[blocs$id %in% ids2,])
# plot(geom2)
geom <- st_difference(geom1, st_union(geom2))
if(length(geom) > 0) {
st_geometry(tops[tops$id == i,]) <- geom
} else {
# Supprimer les geometries vides (TODO)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
plot(st_geometry(faces), col="red")
plot(st_geometry(tops), col="blue", add=T)
# ------------------------------------------------------------------------
# TEST
states <- readRDS("us.rds")
x <- deform(states)
tmp <- extrude(x, "pop2019", k = 1, col = "red")
faces <- tmp[[1]]
tops <- tmp[[2]]
tops <- tops[order(tops$height, decreasing = FALSE),]
faces <- faces[order(faces$pos, decreasing = TRUE),]
plot(st_geometry(faces), col ="red")
tops <- tops[order(tops$height, decreasing = FALSE),]
plot(st_geometry(tops[1,]), col ="blue", add=T)
plot(st_geometry(tops), col ="blue", add=T)
faces <- faces[order(faces$pos, decreasing = TRUE),]
plot(st_geometry(faces), col="red")
plot(st_geometry(tops), col="blue", add=T)
states <- readRDS("us.rds")
x <- deform(states)
var = "pop2019"
k = 0.01
col = "red"
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")}
nodes <- st_cast(x,"POINT", warn = FALSE)
# Faces
nodes$first <- !duplicated(nodes$id)
nodes$last <- !duplicated(nodes$id, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- dots2x
p3y <- dots2y + dots2$height
p4x <- dots1x
p4y <- dots1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
faces$p1x <- p1x
faces$p2y <- p2y
faces$fd <- paste(faces$p1x,faces$p2y)
faces <- faces[order(faces$pos, decreasing = TRUE),]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
tops <- tops[order(tops$height, decreasing = FALSE),]
plot(st_geometry(faces), col="red")
for(i in ids){
if(i == ids[1]){
f <- st_difference(faces[faces$id == i,],st_buffer(tops[tops$id==i,],1))
} else {
tmp <-  st_difference(faces[faces$id == i,],st_buffer(tops[tops$id==i,],1))
f <- rbind(f,tmp)
}
}
plot(st_geometry(f), col="red")
plot(st_geometry(faces), col="blue")
plot(st_geometry(f), col="red", add=T)
plot(st_geometry(faces), col="blue")
plot(st_geometry(f), col="red", add=T)
plot(st_geometry(faces), col="blue")
plot(st_geometry(f), col="red", add=T)
ids <- tops$id
blocs <- x
for (i in ids){
st_geometry(blocs[i,]) <- st_buffer(st_union(st_union(st_geometry(faces[faces$id==i,]),st_geometry(tops[tops$id==i,]))),1)
}
for(i in ids){
v <- as.numeric(tops[tops$id == i,var] %>% st_drop_geometry())
tmp <- tops %>% st_drop_geometry()
ids2 <- tmp[tmp[,var] > v & tmp$id != i,"id"]
geom1 <- st_geometry(tops[tops$id == i,])
# plot(geom1)
geom2 <- st_geometry(blocs[blocs$id %in% ids2,])
# plot(geom2)
geom <- st_difference(geom1, st_union(geom2))
if(length(geom) > 0) {
st_geometry(tops[tops$id == i,]) <- geom
} else {
# Supprimer les geometries vides (TODO)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
plot(st_geometry(faces), col="red")
states <- readRDS("us.rds")
x <- deform(states)
var = "pop2019"
k = 0.01
col = "red"
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")}
nodes <- st_cast(x,"POINT", warn = FALSE)
# Faces
nodes$first <- !duplicated(nodes$id)
nodes$last <- !duplicated(nodes$id, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- dots2x
p3y <- dots2y + dots2$height
p4x <- dots1x
p4y <- dots1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
faces$p1x <- p1x
faces$p2y <- p2y
faces$fd <- paste(faces$p1x,faces$p2y)
faces <- faces[order(faces$pos, decreasing = TRUE),]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
tops <- tops[order(tops$height, decreasing = FALSE),]
# Opérations géométriques
plot(st_geometry(faces), col="red")
plot(st_geometry(tops), col="blue", add=T)
# 1
for(i in ids){
if(i == ids[1]){
f <- st_difference(faces[faces$id == i,],st_buffer(tops[tops$id==i,],1))
} else {
tmp <-  st_difference(faces[faces$id == i,],st_buffer(tops[tops$id==i,],1))
f <- rbind(f,tmp)
}
}
plot(st_geometry(faces), col="blue")
plot(st_geometry(f), col="red", add=T)
faces <- f
ids <- tops$id
blocs <- x
for (i in ids){
st_geometry(blocs[i,]) <- st_buffer(st_union(st_union(st_geometry(faces[faces$id==i,]),st_geometry(tops[tops$id==i,]))),1)
}
for(i in ids){
v <- as.numeric(tops[tops$id == i,var] %>% st_drop_geometry())
tmp <- tops %>% st_drop_geometry()
ids2 <- tmp[tmp[,var] > v & tmp$id != i,"id"]
geom1 <- st_geometry(tops[tops$id == i,])
# plot(geom1)
geom2 <- st_geometry(blocs[blocs$id %in% ids2,])
# plot(geom2)
geom <- st_difference(geom1, st_union(geom2))
if(length(geom) > 0) {
st_geometry(tops[tops$id == i,]) <- geom
} else {
# Supprimer les geometries vides (TODO)
}
}
faces <- faces[order(faces$pos, decreasing = TRUE),]
plot(st_geometry(faces), col="red")
plot(st_geometry(tops), col="blue", add=T)
View(tops)
View(tops)
tops <- tops[order(tops$height), decreasing = FALSE,]
View(tops)
tops <- tops[order(tops$height), decreasing = TRUE,]
tops
tops <- tops[order(tops$height), decreasing = TRUE,]
View(tops)
tops <- tops[order(tops$height), decreasing = FALSE,]
View(tops)
tops <- tops[order(tops$height), decreasing = TRUE,]
View(tops)
tops <- tops[order(tops$height, decreasing = FALSE),]
View(tops)
tops <- tops[order(tops$height, decreasing = TRUE),]
View(tops)
ids <- tops$id
ids
for (i in ids){
#plot(st_geometry(faces[faces$id == i,]), col=faces$fill[faces$id == i], border = faces$border, add = TRUE)
plot(st_geometry(faces[faces$id == i,]), col=faces$fill[faces$id == i], border = "black", add = TRUE)
plot(st_geometry(tops[i,]), col = fill[1], add = TRUE)
}
#plot(st_geometry(faces[faces$id == i,]), col=faces$fill[faces$id == i], border = faces$border, add = TRUE)
plot(st_geometry(faces[faces$id == i,]), col=faces$fill[faces$id == i], border = "black", add = TRUE)
for (i in ids){
#plot(st_geometry(faces[faces$id == i,]), col=faces$fill[faces$id == i], border = faces$border, add = TRUE)
plot(st_geometry(faces[faces$id == i,]), col="blue", border = "black", add = TRUE)
plot(st_geometry(tops[i,]), col = "red", add = TRUE)
}
tops <- tops[order(tops$height, decreasing = FALSE),]
ids <- tops$id
for (i in ids){
#plot(st_geometry(faces[faces$id == i,]), col=faces$fill[faces$id == i], border = faces$border, add = TRUE)
plot(st_geometry(faces[faces$id == i,]), col="blue", border = "black", add = TRUE)
plot(st_geometry(tops[i,]), col = "red", add = TRUE)
}
states <- readRDS("us.rds")
x <- deform(states)
var = "pop2019"
k = 0.01
col = "red"
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")}
nodes <- st_cast(x,"POINT", warn = FALSE)
# Faces
nodes$first <- !duplicated(nodes$id)
nodes$last <- !duplicated(nodes$id, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- dots2x
p3y <- dots2y + dots2$height
p4x <- dots1x
p4y <- dots1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
faces$p1x <- p1x
faces$p2y <- p2y
faces$fd <- paste(faces$p1x,faces$p2y)
faces <- faces[order(faces$pos, decreasing = TRUE),]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
tops <- tops[order(tops$height, decreasing = FALSE),]
plot(st_geometry(faces), col="red")
plot(st_geometry(tops), col="blue", add=T)
ids <- tops$id
blocs <- x
for (i in ids){
st_geometry(blocs[i,]) <- st_buffer(st_union(st_union(st_geometry(faces[faces$id==i,]),st_geometry(tops[tops$id==i,]))),1)
}
for(i in ids){
v <- as.numeric(tops[tops$id == i,var] %>% st_drop_geometry())
tmp <- tops %>% st_drop_geometry()
ids2 <- tmp[tmp[,var] > v & tmp$id != i,"id"]
geom1 <- st_geometry(tops[tops$id == i,])
# plot(geom1)
geom2 <- st_geometry(blocs[blocs$id %in% ids2,])
# plot(geom2)
geom <- st_difference(geom1, st_union(geom2))
if(length(geom) > 0) {
st_geometry(tops[tops$id == i,]) <- geom
} else {
# Supprimer les geometries vides (TODO)
}
}
plot(st_geometry(faces), col="red")
plot(st_geometry(tops), col="blue", add=T)
x <- readRDS("world.rds")
x <- readRDS("worldpopgrid.rds")
w <- readRDS("worldpopgrid.rds")
x <- deform(w)
var = "pop2020"
#states <- readRDS("us.rds")
# x <- deform(states)
#var = "pop2019"
k = 0.01
col = "red"
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")}
nodes <- st_cast(x,"POINT", warn = FALSE)
nodes$first <- !duplicated(nodes$id)
nodes$last <- !duplicated(nodes$id, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- dots2x
p3y <- dots2y + dots2$height
p4x <- dots1x
p4y <- dots1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
faces$p1x <- p1x
faces$p2y <- p2y
faces$fd <- paste(faces$p1x,faces$p2y)
faces <- faces[order(faces$pos, decreasing = TRUE),]
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
tops <- tops[order(tops$height, decreasing = FALSE),]
plot(st_geometry(faces), col="red")
plot(st_geometry(tops), col="blue", add=T)
w <- readRDS("worldpopgrid.rds")
x <- deform(w)
var = "pop2020"
#states <- readRDS("us.rds")
# x <- deform(states)
#var = "pop2019"
k = 0.01
col = "red"
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")}
nodes <- st_cast(x,"POINT", warn = FALSE)
# Faces
nodes$first <- !duplicated(nodes$id)
nodes$last <- !duplicated(nodes$id, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- dots2x
p3y <- dots2y + dots2$height
p4x <- dots1x
p4y <- dots1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
faces$p1x <- p1x
faces$p2y <- p2y
faces$fd <- paste(faces$p1x,faces$p2y)
faces <- faces[order(faces$pos, decreasing = TRUE),]
plot(st_geometry(faces))
w <- readRDS("worldpopgrid.rds")
x <- deform(w)
var = "pop2020"
#states <- readRDS("us.rds")
# x <- deform(states)
#var = "pop2019"
k = 0.001
col = "red"
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")}
nodes <- st_cast(x,"POINT", warn = FALSE)
# Faces
nodes$first <- !duplicated(nodes$id)
nodes$last <- !duplicated(nodes$id, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- dots2x
p3y <- dots2y + dots2$height
p4x <- dots1x
p4y <- dots1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
faces$p1x <- p1x
faces$p2y <- p2y
faces$fd <- paste(faces$p1x,faces$p2y)
faces <- faces[order(faces$pos, decreasing = TRUE),]
plot(st_geometry(faces))
# w <- readRDS("worldpopgrid.rds")
# x <- deform(w)
# var = "pop2020"
states <- readRDS("us.rds")
x <- deform(states)
var = "pop2019"
k = 0.01
col = "red"
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")}
nodes <- st_cast(x,"POINT", warn = FALSE)
# Faces
nodes$first <- !duplicated(nodes$id)
nodes$last <- !duplicated(nodes$id, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- dots2x
p3y <- dots2y + dots2$height
p4x <- dots1x
p4y <- dots1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
faces$p1x <- p1x
faces$p2y <- p2y
faces$fd <- paste(faces$p1x,faces$p2y)
faces <- faces[order(faces$pos, decreasing = TRUE),]
plot(st_geometry(faces))
