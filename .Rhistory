c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c))
}
}
}
View(dos)
View(dost)
View(dots)
test <- st_is_within_distance(dots,x,1)
i = 1
poly1 <- test[[i]][1]
poly2 <- test[[i]][2]
poly1
poly2
l1
l1 <- test[[i]][1]
l1
l2
l2 <- test[[i]][2]
l2
x[,41]
x[41,]
x[42,"height"]
x[42,"height"] %>% st_drop_geometry()
as.numeric(x[42,"height"] %>% st_drop_geometry())
as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
as.numeric(x[test[[i]][1],"height"])
as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
tmp1
tmp2
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2)
height1
height2
dots["height1",i]
dots[i, "height1"]
dim(dots)[1])
dim(dots)[1]
# Detect values
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
dots[i, "height1"] <- min(tmp1, tmp2)
dots[i, "height2"] <- max(tmp1, tmp2)
}
View(dots)
# Detect values
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
dots[i, "height1"] <- min(tmp1, tmp2, na.rm=TRUE)
dots[i, "height2"] <- max(tmp1, tmp2, na.rm=TRUE)
}
View(dots)
# Detect values
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
dots[i, "height1"] <- min(tmp1, tmp2)
dots[i, "height2"] <- max(tmp1, tmp2, na.rm=TRUE)
}
View(dots)
dots$height1
dots$height1[is.na(dots$height1)] <- 0
View(dots)
View(dots)
dots$y1 <-
View(dots)
x <- st_cast(x, "POLYGON")
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
# Polygons to dots
nodes <- st_cast(x,"POINT")
nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
for (i in 1 : nb){
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c))
}
}
}
# duplicate suppression
dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
# get xxxxxxx
test <- st_is_within_distance(dots,x,1)
# Detect values
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
dots[i, "height1"] <- min(tmp1, tmp2)
dots[i, "height2"] <- max(tmp1, tmp2, na.rm=TRUE)
}
dots$height1[is.na(dots$height1)] <- 0
View(dots)
i = 1
geometry=st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
dot1 <- c(pts[z,"X"], pts[z,"Y"])
dot1
pts
dot1
# Extrusion
View(dots)
dot1 <- c(dots$x1,dots$y1 + height1)
dot1
st_geometry(dots) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
dot1 <- c(dots$x1,dots$y1 + height1)
dot2 <- c(dots$x2,dots$y2 + height1)
dot3 <- c(dots$x2,dots$y2 + height2)
dot4 <- c(dots$x1,dots$y1 + height2)
st_geometry(dots) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
dot4
dot3
dot2
dot1
st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
height1
height1
height2
height2
dot1 <- c(dots$x1,dots$y1 + height1)
dot2 <- c(dots$x2,dots$y2 + height1)
dot3 <- c(dots$x2,dots$y2 + height2)
dot4 <- c(dots$x1,dots$y1 + height2)
st_geometry(dots) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
geom <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
dots$x1
dots$x1[i]
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
st_geometry(dots[i])
st_geometry(dots[i,])
# Detect values
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
# Detect values
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
i = 1
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
height1
height2
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
dot1
dot2
dot3
dot4
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
i = 2
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
i = 3
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
i = 5
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
i = 30
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
dim(dots)[1]
i = 16
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
if(is.na(height1)){height1 <- 0}
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
# Extrusion
View(dots)
plot(st_geometry(dots))
plots(st_geometry(x))
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow, "add = T)
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
x <- deform(states)
var = "pop2019"
k = 0.05
col = "red"
add = FALSE
x <- st_cast(x, "POLYGON")
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
# Polygons to dots
nodes <- st_cast(x,"POINT")
nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
for (i in 1 : nb){
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c))
}
}
}
# duplicate suppression
dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
# get xxxxxxx
test <- st_is_within_distance(dots,x,1)
# Extrusion
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
if(is.na(height1)){height1 <- 0}
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
poly2 <- x + c(0, as.numeric(x[i,var])[1] * k)
x
as.numeric(x[i,var])[1]
poly2 <- x + c(0, as.numeric(x[,var])[1] * k)
# Tops
for (i in 1:dim(x)[1]){
poly2 <- x + c(0, as.numeric(x[i,var])[1] * k)
}
1:dim(x)[1]
i = 1
x[i]
x[i,]
poly2 <- x[i,] + c(0, as.numeric(x[i,var])[1] * k)
x[i,]
+ c(0, as.numeric(x[i,var])[1] * k)
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
for (i in 1:dim(x)[1]){
poly <- st_geometry(x)[[i]]
poly2 <- poly + c(0, as.numeric(x[i,var])[1] * k)
}
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
plot(st_geometry(poly2), col = "blue", add = T)
# Tops
tops <- x
View(tops)
st_geometry(tops) <- st_geometry(tops) + top$pop2019 * k
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
plot(st_geometry(poly2), col = "blue", add = T)
plot(st_geometry(x))
plot(st_geometry(tops))
plot(st_geometry(tops))
st_geometry(tops) <- st_geometry(tops) + top$pop2019 * k
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
plot(st_geometry(poly2), col = "blue", add = T)
plot(st_geometry(tops), col = "blue", add = T)
st_geometry(tops[i])
st_geometry(tops[i,])
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
plot(st_geometry(tops), col = "blue", add = T)
as.numeric(x[i,var])[1]
x <- deform(states)
var = "pop2019"
k = 0.005
col = "red"
add = FALSE
x <- st_cast(x, "POLYGON")
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
# Polygons to dots
nodes <- st_cast(x,"POINT")
nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
for (i in 1 : nb){
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c))
}
}
}
# duplicate suppression
dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
# get xxxxxxx
# Extrusion
test <- st_is_within_distance(dots,x,1)
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
if(is.na(height1)){height1 <- 0}
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
plot(st_geometry(tops), col = "blue", add = T)
x <- st_cast(x, "POLYGON")
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
# Polygons to dots
nodes <- st_cast(x,"POINT")
#nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
for (i in 1 : nb){
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, geometry=c))
}
}
}
# duplicate suppression
dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
# get xxxxxxx
# Extrusion
test <- st_is_within_distance(dots,x,1)
for (i in 1 : dim(dots)[1]){
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
if(is.na(height1)){height1 <- 0}
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
plot(st_geometry(x))
plot(st_geometry(dots), col = "yellow", add = T)
plot(st_geometry(tops), col = "blue", add = T)
ids <-tops[order(tops[,var], decreasing = FALSE),"id"]
tops[,var]
ids <-tops[order(tops[,var]%>% st_drop_geometry(), decreasing = FALSE),"id"]
ids
ids <-tops[order(tops[,var] %>% st_drop_geometry(), decreasing = FALSE),"id"]%>% st_drop_geometry()
ids
View(x)
View(dots)
View(tops)
plot(st_geometry(x))
plot(st_geometry(dots), col="blue", add=T)
plot(st_geometry(x))
plot(st_geometry(dots), col="blue", add=T)
for (i in ids){
plot(st_geometry(tops[,i]), col = "yellox", add = T)
}
plot(st_geometry(x))
plot(st_geometry(dots), col="blue", add=T)
for (i in ids){
plot(st_geometry(tops[i,]), col = "yellox", add = T)
}
plot(st_geometry(x))
plot(st_geometry(dots), col="blue", add=T)
for (i in ids){
plot(st_geometry(tops[i,]), col = "yellow", add = T)
}
