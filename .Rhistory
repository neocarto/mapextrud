X <- newpts[n,"X"]
# transformation en Y
# Y <- Y + 100000
Y <- Y * flatten
newpts[n,"Y"] <- Y
# transformation en X
v <- c(ymin, Y, ymax)
Y2 <- rescale(v, c(rescale[2], rescale[1]))[2]
X <- X * Y2
newpts[n,"X"] <- X
}
# ---------------------------------------------
# points to polygons
if (sf::st_geometry_type(sf::st_geometry(x)[[i]]) == "POLYGON"){
sf::st_geometry(x)[[i]][[idx[k, "L1"]]] <- newpts
} else {
sf::st_geometry(x)[[i]][[idx[k, "L2"]]][[idx[k, "L1"]]] <- newpts
}
}
}
st_geometry(x) <- st_crop(st_geometry(x), st_bbox(st_union(x)))
return(x)
}
# -------------------------------------------------
# x <- readRDS("us.rds")
#
# library(SpatialPosition)
# data("hospital")
# hospital
# pot <- quickStewart(x = hospital,
#                     var = "capacity",
#                     span = 2000,
#                     beta = 2, mask = paris,
#                     returnclass = "sf")
# plot(st_geometry(pot))
#
# x <- deform(pot)
# var = "center"
# k = 3
# col = "white"
# add = F
# regular = F
#
#
# plot(st_geometry(x), col="blue")
#
extrude <- function(x, var, k = 1, col = "red", regular = FALSE, add = FALSE) {
xraw <- x
x[is.na(x[,var]),var]  <- 0
x <- x[x[,var] %>% st_drop_geometry() > 0,]
tmp <- x[is.na(x[,var]),]
ids <- row.names(tmp)
x[rownames(x) %in% ids,var] <- 0
h <- st_bbox(x)[4]-st_bbox(x)[2]
m <- max(x[,var] %>% st_drop_geometry())
k = k * 0.1 * h / m
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
# g <- unique(as.character(sf::st_geometry_type(x)))
single <- x[st_geometry_type(x) == "POLYGON",]
multi <- x[st_geometry_type(x) == "MULTIPOLYGON",]
exploded <- st_cast(multi,"POLYGON", warn = FALSE)
x <- rbind(single, exploded)
View(x)
# x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){
message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")
x$id <- row.names(x)
}
plot(st_geometry(x[x$id==7,]))
nodes <- st_cast(x,"MULTIPOINT", warn = FALSE)
nodes <- st_cast(nodes, "POINT", warn=FALSE)
if(dim(nodes)[1]> 2000 & regular == FALSE){
if (interactive()){
cat(paste0("Sorry, the script is not optimized...\nThe basemap is not enough generalized (",dim(nodes)[1]," nodes) and the computation will take time.\nDo you still want to continue ? [y/n]"))
z <- readLines(con = stdin(), n = 1)
while (!z %in% c("n","y")){
cat ("Enter y or n")
z <- readLines(con = stdin(), n = 1)
}
if (z == "y"){
cat("Okay!\nGo get a coffee and come back later to see the result (or press esc to abort)\n")
} else {
stop("Computation aborted",
call. = F)
}
} else {
stop("Computation aborted",
call. = F)
}
}
L1 <- data.frame(st_coordinates(x))
nodes <- st_sf(cbind(data.frame(nodes),L1= L1$L1))
nodes$id2 <- paste(nodes$id,nodes$L1,sep="_")
# Faces
nodes$first <- !duplicated(nodes$id2)
nodes$last <- !duplicated(nodes$id2, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- p2x
p3y <- p2y + dots2$height
p4x <- p1x
p4y <- p1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
# Colors
if(length(col) == 1){
if(col == "white"){
fill <- c("white","white","white")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
}
}
if(length(col)==2){
fill <- c(col[1],col[2],col[2])
}
if(length(col)==3){
fill <- col
}
faces$fill <- fill[2]
faces[faces$ang > 0,"fill"] <- fill[3]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + c(0, as.numeric(x[i,var])[1] * k)
}
tops <- tops[order(tops$height, decreasing = FALSE),]
st_crs(tops) <- NA
if(regular == FALSE){
message(paste0("Topological detection (",dim(nodes)[1]," nodes)"))
lines <- faces
st_geometry(lines) <- st_as_sfc(paste0("LINESTRING(",p1x," ",p1y,", ",p2x," ",p2y,")"))
nb = dim(lines)[1]
span <- round(nb/10,0)
init <- span
pct <- 10
for(i in 1:nb){
r <- st_contains(lines[i,], lines)
faces$i1[i] <- i
if(r[[1]][1] == i){faces$i2[i] <- r[[1]][2]} else {faces$i2[i] <-r[[1]][1] }
if(i == span){
cat(paste0("[",pct,"%]"))
span <- span + init
pct <- pct + 10
}
}
cat("[100%]")
fext <- faces[is.na(faces$i2),]
f <- faces[!is.na(faces$i2),]
message("")
message("Extrude faces")
span <- round(length(f$i1)/10,0)
init <- span
pct <- 10
count <- 1
f$none <- 0
for(i in f$i1){
i2 <- f$i2[f$i1 == i]
poly1 <- st_geometry(f[f$i1 == i,])
poly2 <- st_geometry(f[f$i1 == i2,])
height1 <- f$height[f$i1 == i]
height2 <- f$height[f$i1 == i2]
#if(height2 == 0){poly2 <- st_buffer(poly2,1)}
if(height1 > height2){
st_geometry(f[f$i1==i,]) <- st_difference(poly1,poly2)
} else {
f$none[f$i1==i] <- 1
}
if(count == span){
cat(paste0("[",pct,"%]"))
span <- span + init
pct <- pct + 10
}
count <- count +1
}
cat("[100%]")
f <- f[f$none == 0,]
f <- f[order(f$pos, decreasing = TRUE),]
message("")
message("Cleaning")
f <- f[,c("id","height","fill","pos")]
fext <- fext[,c("id","height","fill","pos")]
f$type <- "inter"
fext$type <- "ext"
faces <- rbind(fext,f)
faces <- faces[order(faces$pos,decreasing = TRUE),]
nb <- dim(faces)[1]
faces$none <- 0
faces$i <- 1:nb
span <- round(nb/10,0)
init <- span
pct <- 10
for (i in 1:nb){
id <- (faces[i,"id"] %>% st_drop_geometry())[,1]
poly1 <- st_geometry(faces[i,])
poly2 <- st_union(st_geometry(faces[faces$i > i, ]))
poly2 <- st_union(poly2,st_geometry(tops[tops$id==id,]))
geom <- st_difference(poly1,st_buffer(poly2,1))
if (length(geom) > 0){
st_geometry(faces[i,]) <- geom
} else {
faces[i,"none"] <- 1
}
if(i == span){
cat(paste0("[",pct,"%]"))
span <- span + init
pct <- pct + 10
}
}
cat("[100%]")
faces <- faces[faces$none == 0,]
# Plot
plot(st_geometry(xraw),col=fill[1], add=add)
for(i in tops$id)
{
plot(st_geometry(faces[faces$id == i,]), col=faces$fill[faces$id ==i], add=T)
plot(st_geometry(tops[tops$id == i,]), col=fill[1], add=T)
}
message("")
message("Done")
} else {
# f <- faces
# Sort
message("Extrusion et ordering")
faces <- faces[,c("id","pos","fill")]
tops$id[1]
for (i in tops$id){
tops[tops$id == i,"pos"] <- max(faces[faces$id == i,"pos"] %>% st_drop_geometry()) - 1000
}
tops$fill <- fill[1]
tops <- tops[,c("id","pos","fill")]
geom <- rbind(faces, tops)
geom <- geom[order(geom$pos, decreasing = TRUE),]
# Display
plot(st_geometry(xraw), add=add)
plot(st_geometry(geom), col=geom$fill, add=T)
}
}
states <- readRDS("us.rds")
basemap <- deform(states)
extrude(basemap, var = "pop2019" , k = 1, col = "red")
extrude <- function(x, var, k = 1, col = "red", regular = FALSE, add = FALSE) {
xraw <- x
x[is.na(x[,var]),var]  <- 0
x <- x[x[,var] %>% st_drop_geometry() > 0,]
tmp <- x[is.na(x[,var]),]
ids <- row.names(tmp)
x[rownames(x) %in% ids,var] <- 0
h <- st_bbox(x)[4]-st_bbox(x)[2]
m <- max(x[,var] %>% st_drop_geometry())
k = k * 0.1 * h / m
x$id <- row.names(x)
x[,"height"] <- x[,var] %>% st_drop_geometry() * k
x[is.na(x[,var]),"height"] <- 0
n1 <- dim(x)[1]
# g <- unique(as.character(sf::st_geometry_type(x)))
single <- x[st_geometry_type(x) == "POLYGON",]
multi <- x[st_geometry_type(x) == "MULTIPOLYGON",]
exploded <- st_cast(multi,"POLYGON", warn = FALSE)
x <- rbind(single, exploded)
# x <- st_cast(x, "POLYGON", warn = FALSE)
n2 <- dim(x)[1]
if(n2 > n1){
message("Splitting multi-part polygon into single polygons. The same value is assigned to each splitted polygon.")
x$id <- row.names(x)
}
nodes <- st_cast(x,"MULTIPOINT", warn = FALSE)
nodes <- st_cast(nodes, "POINT", warn=FALSE)
if(dim(nodes)[1]> 2000 & regular == FALSE){
if (interactive()){
cat(paste0("Sorry, the script is not optimized...\nThe basemap is not enough generalized (",dim(nodes)[1]," nodes) and the computation will take time.\nDo you still want to continue ? [y/n]"))
z <- readLines(con = stdin(), n = 1)
while (!z %in% c("n","y")){
cat ("Enter y or n")
z <- readLines(con = stdin(), n = 1)
}
if (z == "y"){
cat("Okay!\nGo get a coffee and come back later to see the result (or press esc to abort)\n")
} else {
stop("Computation aborted",
call. = F)
}
} else {
stop("Computation aborted",
call. = F)
}
}
L1 <- data.frame(st_coordinates(x))
nodes <- st_sf(cbind(data.frame(nodes),L1= L1$L1))
nodes$id2 <- paste(nodes$id,nodes$L1,sep="_")
# Faces
nodes$first <- !duplicated(nodes$id2)
nodes$last <- !duplicated(nodes$id2, fromLast = TRUE)
dots1 <- nodes[!nodes$last,]
dots2 <- nodes[!nodes$first,]
p1x <- st_coordinates(dots1)[,1]
p1y <- st_coordinates(dots1)[,2]
p2x <- st_coordinates(dots2)[,1]
p2y <- st_coordinates(dots2)[,2]
p3x <- p2x
p3y <- p2y + dots2$height
p4x <- p1x
p4y <- p1y + dots1$height
faces <- dots1
faces$ang <- atan((p2y - p1y) / ( p2x - p1x))*180/pi
faces$pos <- (p1y + p2y)/2
st_geometry(faces) <- st_as_sfc(paste0("POLYGON((",p1x," ",p1y,", ",p2x," ",p2y,", ",p3x," ",p3y,", ",p4x," ",p4y,", ",p1x," ",p1y,"))"))
# Colors
if(length(col) == 1){
if(col == "white"){
fill <- c("white","white","white")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
}
}
if(length(col)==2){
fill <- c(col[1],col[2],col[2])
}
if(length(col)==3){
fill <- col
}
faces$fill <- fill[2]
faces[faces$ang > 0,"fill"] <- fill[3]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + c(0, as.numeric(x[i,var])[1] * k)
}
tops <- tops[order(tops$height, decreasing = FALSE),]
st_crs(tops) <- NA
if(regular == FALSE){
message(paste0("Topological detection (",dim(nodes)[1]," nodes)"))
lines <- faces
st_geometry(lines) <- st_as_sfc(paste0("LINESTRING(",p1x," ",p1y,", ",p2x," ",p2y,")"))
nb = dim(lines)[1]
span <- round(nb/10,0)
init <- span
pct <- 10
for(i in 1:nb){
r <- st_contains(lines[i,], lines)
faces$i1[i] <- i
if(r[[1]][1] == i){faces$i2[i] <- r[[1]][2]} else {faces$i2[i] <-r[[1]][1] }
if(i == span){
cat(paste0("[",pct,"%]"))
span <- span + init
pct <- pct + 10
}
}
cat("[100%]")
fext <- faces[is.na(faces$i2),]
f <- faces[!is.na(faces$i2),]
message("")
message("Extrude faces")
span <- round(length(f$i1)/10,0)
init <- span
pct <- 10
count <- 1
f$none <- 0
for(i in f$i1){
i2 <- f$i2[f$i1 == i]
poly1 <- st_geometry(f[f$i1 == i,])
poly2 <- st_geometry(f[f$i1 == i2,])
height1 <- f$height[f$i1 == i]
height2 <- f$height[f$i1 == i2]
#if(height2 == 0){poly2 <- st_buffer(poly2,1)}
if(height1 > height2){
st_geometry(f[f$i1==i,]) <- st_difference(poly1,poly2)
} else {
f$none[f$i1==i] <- 1
}
if(count == span){
cat(paste0("[",pct,"%]"))
span <- span + init
pct <- pct + 10
}
count <- count +1
}
cat("[100%]")
f <- f[f$none == 0,]
f <- f[order(f$pos, decreasing = TRUE),]
message("")
message("Cleaning")
f <- f[,c("id","height","fill","pos")]
fext <- fext[,c("id","height","fill","pos")]
f$type <- "inter"
fext$type <- "ext"
faces <- rbind(fext,f)
faces <- faces[order(faces$pos,decreasing = TRUE),]
nb <- dim(faces)[1]
faces$none <- 0
faces$i <- 1:nb
span <- round(nb/10,0)
init <- span
pct <- 10
for (i in 1:nb){
id <- (faces[i,"id"] %>% st_drop_geometry())[,1]
poly1 <- st_geometry(faces[i,])
poly2 <- st_union(st_geometry(faces[faces$i > i, ]))
poly2 <- st_union(poly2,st_geometry(tops[tops$id==id,]))
geom <- st_difference(poly1,st_buffer(poly2,1))
if (length(geom) > 0){
st_geometry(faces[i,]) <- geom
} else {
faces[i,"none"] <- 1
}
if(i == span){
cat(paste0("[",pct,"%]"))
span <- span + init
pct <- pct + 10
}
}
cat("[100%]")
faces <- faces[faces$none == 0,]
# Plot
plot(st_geometry(xraw),col=fill[1], add=add)
for(i in tops$id)
{
plot(st_geometry(faces[faces$id == i,]), col=faces$fill[faces$id ==i], add=T)
plot(st_geometry(tops[tops$id == i,]), col=fill[1], add=T)
}
message("")
message("Done")
} else {
# f <- faces
# Sort
message("Extrusion et ordering")
faces <- faces[,c("id","pos","fill")]
tops$id[1]
for (i in tops$id){
tops[tops$id == i,"pos"] <- max(faces[faces$id == i,"pos"] %>% st_drop_geometry()) - 1000
}
tops$fill <- fill[1]
tops <- tops[,c("id","pos","fill")]
geom <- rbind(faces, tops)
geom <- geom[order(geom$pos, decreasing = TRUE),]
# Display
plot(st_geometry(xraw), add=add)
plot(st_geometry(geom), col=geom$fill, add=T)
}
}
# Example 1
states <- readRDS("us.rds")
basemap <- deform(states)
extrude(basemap, var = "pop2019" , k = 1, col = "red")
library(SpatialPosition)
data("hospital")
# Compute potentials
pot <- quickStewart(x = hospital,
var = "capacity",
span = 1000,
beta = 2, mask = paris,
returnclass = "sf")
View(pot)
basemap <- deform(pot)
plot(st_geometry(basemap), col="red")
extrude(basemap, "center", k = 3, col = "white", regular = FALS
extrude(basemap, "center", k = 3, col = "white", regular = FALSE)
extrude(basemap, "center", k = 7, col = "white", regular = FALSE)
library(cartography)
mtq <- st_read(system.file("gpkg/mtq.gpkg", package="cartography"))
basemap <- deform(rotate(mtq,-40))
extrude(basemap, "POP", k = 1, col = "white")
library(cartography)
mtq <- st_read(system.file("gpkg/mtq.gpkg", package="cartography"))
basemap <- deform(rotate(mtq,-40))
extrude(basemap, "POP", k = 2, col = "white")
library(SpatialPosition)
data("hospital")
# Compute potentials
pot <- quickStewart(x = hospital,
var = "capacity",
span = 600,
beta = 2, mask = paris,
returnclass = "sf")
plot(pot)
library(SpatialPosition)
data("hospital")
# Compute potentials
pot <- quickStewart(x = hospital,
var = "capacity",
span = 700,
beta = 2, mask = paris,
returnclass = "sf")
plot(pot)
basemap <- deform(pot)
extrude(basemap, "center", k = 4, col = "white", regular = FALSE)
# Example 6 (Paris smooth)
library(SpatialPosition)
data("hospital")
# Compute potentials
pot <- quickStewart(x = hospital,
var = "capacity",
span = 800,
beta = 2, mask = paris,
returnclass = "sf")
basemap <- deform(pot)
plot(basemap)
getwd()
library(mapextrud)
