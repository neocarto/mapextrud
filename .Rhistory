dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
# Dots -> faces
test <- st_is_within_distance(dots,x,1)
message("")
message("Extrusion")
pct <- 0
for (i in 1 : dim(dots)[1]){
n <- seq(1, dim(dots)[1], by = round(dim(dots)[1]/10,0))
n <- n[1:length(n)-1]
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
if (tmp1 > tmp2 | is.na(tmp2)){
dots$id[i]  <- as.numeric(x[test[[i]][1],"id"])[1]
} else {
dots$id[i] <- as.numeric(x[test[[i]][2],"id"])[1]
}
if(is.na(height1)){height1 <- 0}
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
dots[i,"ang"] <- atan((dot2[2] - dot1[2]) / ( dot2[1] - dot1[1]))*180/pi
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
faces <- dots
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
faces$border <- border[2]
faces$fill <- fill[2]
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
# Sort & plot
faces <-  faces[order(faces[,"pos"])]
ids <- tops[order(tops[,var] %>% st_drop_geometry(), decreasing = FALSE),"id"]%>% st_drop_geometry()
ids <- ids$id
plot(st_geometry(x), add = FALSE)
for (i in ids){
plot(st_geometry(faces[faces$id == i,]), col=faces$fill, border = faces$border, add = TRUE)
plot(st_geometry(tops[i,]), col = fill[1], add = TRUE)
}
message("")
message("Done")
return(faces)
}
x <- deform(states[states$id %in% c("NV"),])
plot(getframe(x))
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
#plot(st_geometry(x), border="red", add=T)
plot(st_geometry(f), col="#CCCCCC")
extrude <- function(x, var, k = 0.5, col = "red") {
x <- st_cast(x, "POLYGON", warn = FALSE)
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
# Polygons to dots
nodes <- st_cast(x,"POINT", warn = FALSE)
#nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
message("Topology Detection")
pct <- 0
for (i in 1:nb){
n <- seq(1, nb, by = round(nb/10,0))
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
pos <- (y1 + y2) / 2
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos,  geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos, geometry=c))
}
}
}
# duplicate suppression
dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
# Dots -> faces
test <- st_is_within_distance(dots,x,1)
message("")
message("Extrusion")
pct <- 0
for (i in 1 : dim(dots)[1]){
n <- seq(1, dim(dots)[1], by = round(dim(dots)[1]/10,0))
n <- n[1:length(n)-1]
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
if (tmp1 > tmp2 | is.na(tmp2)){
dots$id[i]  <- as.numeric(x[test[[i]][1],"id"])[1]
} else {
dots$id[i] <- as.numeric(x[test[[i]][2],"id"])[1]
}
if(is.na(height1)){height1 <- 0}
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
dots[i,"ang"] <- atan((dot2[2] - dot1[2]) / ( dot2[1] - dot1[1]))*180/pi
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
faces <- dots
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
faces$border <- border[2]
faces$fill <- fill[2]
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
# Sort & plot
# faces <-  faces[order(faces[,"pos"])]
ids <- tops[order(tops[,var] %>% st_drop_geometry(), decreasing = FALSE),"id"]%>% st_drop_geometry()
ids <- ids$id
plot(st_geometry(x), add = FALSE)
for (i in ids){
plot(st_geometry(faces[faces$id == i,]), col=faces$fill, border = faces$border, add = TRUE)
plot(st_geometry(tops[i,]), col = fill[1], add = TRUE)
}
message("")
message("Done")
return(faces)
}
x <- deform(states[states$id %in% c("NV"),])
plot(getframe(x))
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
tmp <-  faces[order(faces[,"pos"])]
View(faces)
x <- deform(states)
var = "pop2019"
k = 0.008
col = "red"
add = FALSE
x <- st_cast(x, "POLYGON", warn = FALSE)
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
nodes <- st_cast(x,"POINT", warn = FALSE)
#nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
message("Topology Detection")
pct <- 0
i = 1
n <- seq(1, nb, by = round(nb/10,0))
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
pos <- (y1 + y2) / 2
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos,  geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos, geometry=c))
}
}
View(dots)
x <- st_cast(x, "POLYGON", warn = FALSE)
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
# Polygons to dots
nodes <- st_cast(x,"POINT", warn = FALSE)
#nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
message("Topology Detection")
pct <- 0
for (i in 1:nb){
n <- seq(1, nb, by = round(nb/10,0))
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
pos <- (y1 + y2) / 2
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos,  geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos, geometry=c))
}
}
}
View(dots)
dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
View(dots)
dots <-  dots[order(dots[,"pos"])]
dots[,"pos"]
dots <- dots[order(dots[,"pos"], decreasing = FALSE),]
View(dots)
class(dots)
(dots[,"pos"]
dots[,"pos"]
dots <- dots[order(dots[,"pos"] %>% st_drop_geometry() , decreasing = FALSE),]
vIEW(dots)
View(dots)
extrude <- function(x, var, k = 0.5, col = "red") {
x <- st_cast(x, "POLYGON", warn = FALSE)
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
# Polygons to dots
nodes <- st_cast(x,"POINT", warn = FALSE)
#nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
message("Topology Detection")
pct <- 0
for (i in 1:nb){
n <- seq(1, nb, by = round(nb/10,0))
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
pos <- (y1 + y2) / 2
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos,  geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos, geometry=c))
}
}
}
# duplicate suppression
dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
# Sort
dots <- dots[order(dots[,"pos"] %>% st_drop_geometry() , decreasing = FALSE),]
# Dots -> faces
test <- st_is_within_distance(dots,x,1)
message("")
message("Extrusion")
pct <- 0
for (i in 1 : dim(dots)[1]){
n <- seq(1, dim(dots)[1], by = round(dim(dots)[1]/10,0))
n <- n[1:length(n)-1]
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
if (tmp1 > tmp2 | is.na(tmp2)){
dots$id[i]  <- as.numeric(x[test[[i]][1],"id"])[1]
} else {
dots$id[i] <- as.numeric(x[test[[i]][2],"id"])[1]
}
if(is.na(height1)){height1 <- 0}
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
dots[i,"ang"] <- atan((dot2[2] - dot1[2]) / ( dot2[1] - dot1[1]))*180/pi
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
faces <- dots
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
faces$border <- border[2]
faces$fill <- fill[2]
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
# Sort & plot
# faces <-  faces[order(faces[,"pos"])]
ids <- tops[order(tops[,var] %>% st_drop_geometry(), decreasing = FALSE),"id"] %>% st_drop_geometry()
ids <- ids$id
plot(st_geometry(x), add = FALSE)
for (i in ids){
plot(st_geometry(faces[faces$id == i,]), col=faces$fill, border = faces$border, add = TRUE)
plot(st_geometry(tops[i,]), col = fill[1], add = TRUE)
}
message("")
message("Done")
return(faces)
}
x <- deform(states[states$id %in% c("NV"),])
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
View(f)
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
#plot(st_geometry(x), border="red", add=T)
plot(st_geometry(f), col="#CCCCCC")
plot(st_geometry(f[,1]), col="red")
#plot(st_geometry(x), border="red", add=T)
plot(st_geometry(f), col="#CCCCCC")
plot(st_geometry(f[1,]), col="red")
#plot(st_geometry(x), border="red", add=T)
plot(st_geometry(f), col="#CCCCCC")
plot(st_geometry(f[1,]), col="red", add=T)
plot(st_geometry(f[2,]), col="red", add=T)
extrude <- function(x, var, k = 0.5, col = "red") {
x <- st_cast(x, "POLYGON", warn = FALSE)
x$id <- row.names(x)
x <- x[,c("id",var)]
v <- x[,var] %>% st_drop_geometry()
x$height <- as.numeric(v[,var] * k)
# Polygons to dots
nodes <- st_cast(x,"POINT", warn = FALSE)
#nodes <- nodes[nodes$id %in% c(1:1),] # enlever
nb <- dim(nodes)[1] - 1
message("Topology Detection")
pct <- 0
for (i in 1:nb){
n <- seq(1, nb, by = round(nb/10,0))
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
id1 <- nodes[i,"id"] %>% st_drop_geometry()
id2 <- nodes[i+1,"id"] %>% st_drop_geometry()
x1 <- st_coordinates(nodes[i,])[1]
y1 <- st_coordinates(nodes[i,])[2]
x2 <- st_coordinates(nodes[i+1,])[1]
y2 <- st_coordinates(nodes[i+1,])[2]
pos <- (y1 + y2) / 2
c <- st_sfc(st_point(c(X = (x1 + x2) / 2, Y = (y1 + y2) / 2)))
if (i == 1){
dots <- st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos,  geometry=c)
} else {
if (id1 == id2) {
dots <- rbind(dots,st_sf(x1 = x1, x2 = x2, y1 = y1, y2 = y2, pos = pos, geometry=c))
}
}
}
# duplicate suppression
dots$dbl <- duplicated(dots$geometry)
dots <- dots[!dots$dbl,]
# Sort
dots <- dots[order(dots[,"pos"] %>% st_drop_geometry() , decreasing = TRUE),]
# Dots -> faces
test <- st_is_within_distance(dots,x,1)
message("")
message("Extrusion")
pct <- 0
for (i in 1 : dim(dots)[1]){
n <- seq(1, dim(dots)[1], by = round(dim(dots)[1]/10,0))
n <- n[1:length(n)-1]
if (i %in% n) {
pct <- pct + 10
message(paste0("[",pct,"%]"), appendLF = FALSE)
}
tmp1 <- as.numeric(x[test[[i]][1],"height"] %>% st_drop_geometry())
tmp2 <- as.numeric(x[test[[i]][2],"height"] %>% st_drop_geometry())
height1 <- min(tmp1, tmp2)
height2 <- max(tmp1, tmp2, na.rm=TRUE)
if (tmp1 > tmp2 | is.na(tmp2)){
dots$id[i]  <- as.numeric(x[test[[i]][1],"id"])[1]
} else {
dots$id[i] <- as.numeric(x[test[[i]][2],"id"])[1]
}
if(is.na(height1)){height1 <- 0}
dot1 <- c(dots$x1[i],dots$y1[i] + height1)
dot2 <- c(dots$x2[i],dots$y2[i] + height1)
dot3 <- c(dots$x2[i],dots$y2[i] + height2)
dot4 <- c(dots$x1[i],dots$y1[i] + height2)
dots[i,"ang"] <- atan((dot2[2] - dot1[2]) / ( dot2[1] - dot1[1]))*180/pi
st_geometry(dots[i,]) <- st_sfc(st_polygon(list(rbind(dot1, dot2, dot3, dot4, dot1))))
}
faces <- dots
# colors
if(col == "white"){
fill <- c("white","white","white")
border <- c("black","black","black")
} else {
pal <- colorRampPalette(c("white",col,"black"))(11)
fill <- c(col, pal[3],pal[7])
border <- c(pal[9], pal[4],pal[8])
}
faces$border <- border[2]
faces$fill <- fill[2]
faces[faces$ang > 0,"fill"] <- fill[3]
faces[faces$ang > 0,"border"] <- border[3]
# Tops
tops <- x
for (i in 1:dim(tops)[1])
{
st_geometry(tops[i,]) <- st_geometry(tops[i,]) + + c(0, as.numeric(x[i,var])[1] * k)
}
# Sort & plot
# faces <-  faces[order(faces[,"pos"])]
ids <- tops[order(tops[,var] %>% st_drop_geometry(), decreasing = FALSE),"id"] %>% st_drop_geometry()
ids <- ids$id
plot(st_geometry(x), add = FALSE)
for (i in ids){
plot(st_geometry(faces[faces$id == i,]), col=faces$fill, border = faces$border, add = TRUE)
plot(st_geometry(tops[i,]), col = fill[1], add = TRUE)
}
message("")
message("Done")
return(faces)
}
x <- deform(states[states$id %in% c("NV"),])
plot(getframe(x))
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
#plot(st_geometry(x), border="red", add=T)
#plot(st_geometry(x), border="red", add=T)
plot(st_geometry(f), col="#CCCCCC")
plot(st_geometry(f[2,]), col="red", add=T)
#plot(st_geometry(x), border="red", add=T)
plot(st_geometry(f), col="#CCCCCC")
plot(st_geometry(f[1,]), col="red", add=T)
plot(st_geometry(f[2,]), col="red", add=T)
plot(st_geometry(f[3,]), col="red", add=T)
plot(st_geometry(f[4,]), col="red", add=T)
plot(st_geometry(f[5,]), col="red", add=T)
plot(st_geometry(f[6,]), col="red", add=T)
plot(st_geometry(f[7,]), col="red", add=T)
plot(st_geometry(f[8,]), col="red", add=T)
plot(st_geometry(f[9,]), col="red", add=T)
plot(st_geometry(f[10,]), col="red", add=T)
plot(st_geometry(f[11,]), col="red", add=T)
plot(st_geometry(f[12,]), col="red", add=T)
plot(st_geometry(f[13,]), col="red", add=T)
plot(st_geometry(f[14,]), col="red", add=T)
plot(st_geometry(f[15,]), col="red", add=T)
plot(st_geometry(f[16,]), col="red", add=T)
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
x <- deform(states)
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
x <- deform(states[states$id %in% c("CA"),])
x <- deform(states)
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
x <- deform(states[states$id %in% c("CA"),])
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
x <- deform(states[states$id %in% c("CA"),])
#plot(st_geometry(x), border="red", add=T)
plot(st_geometry(f), col="#CCCCCC")
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
x <- deform(states)
f <- extrude(x, "pop2019", k = 0.007, col = "#ffc014")
